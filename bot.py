from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackContext
import psycopg2
import requests
from bs4 import BeautifulSoup
import os

DB_HOST = "postgres"
DB_NAME = "recipe_diet_bot"
DB_USER = "anyta"
#DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_PASSWORD = 5665
BOT_TOKEN = os.getenv("BOT_TOKEN")

GENDER, AGE, WEIGHT, HEIGHT, ACTIVITY, DIET = range(6)

gender_keyboard = [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']]
activity_keyboard = [
    ['1.2 (–ú–∏–Ω–∏–º—É–º –Ω–∞–≥—Ä—É–∑–æ–∫)', '1.375 (–õ–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)'],
    ['1.4625 (–£–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω.)', '1.55 (–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω.)'],
    ['1.725 (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)', '1.9 (–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)']
]
diet_keyboard = [
    ['–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è', '–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞', '–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã'],
    ['–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ']
]


def calculate_calories(gender, age, weight, height, activity):
    if gender == "–ú—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    return int(bmr * activity)


async def start_message(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–Ø –±–æ—Ç - —Å–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

async def change_diet(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=ReplyKeyboardMarkup(diet_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return DIET


async def restart_data_input(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text(
        "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(
            [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']], resize_keyboard=True, one_time_keyboard=True
        )
    )
    return GENDER


async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üëâ `/start` ‚Äî –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "üëâ `/cancel` ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.\n"
        "üëâ `/start_message` ‚Äî –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤–≤–µ–¥–∏—Ç–µ `/help`."
    )


async def start(update: Update, context: CallbackContext):
    context.user_data.clear()
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é. "
        "–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(
            [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']], one_time_keyboard=True, resize_keyboard=True
        )
    )
    return GENDER


async def gender(update: Update, context: CallbackContext):
    user_input = update.message.text.strip().lower()
    valid_genders = {"–º—É–∂—á–∏–Ω–∞": "–ú—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞": "–ñ–µ–Ω—â–∏–Ω–∞"}

    if user_input in valid_genders:
        context.user_data['gender'] = valid_genders[user_input]
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return AGE
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup(
                [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']], one_time_keyboard=True, resize_keyboard=True
            )
        )
        return GENDER


async def age(update: Update, context: CallbackContext):
    try:
        user_age = int(update.message.text.strip())
        if 10 <= user_age <= 120:
            context.user_data['age'] = user_age
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):")
            return WEIGHT
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 120 –ª–µ—Ç."
            )
            return AGE
    except ValueError:
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return AGE


async def weight(update: Update, context: CallbackContext):
    try:
        user_weight = float(update.message.text.strip())
        if 30 <= user_weight <= 300:
            context.user_data['weight'] = user_weight
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170):")
            return HEIGHT
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥."
            )
            return WEIGHT
    except ValueError:
        await update.message.reply_text("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return WEIGHT


async def height(update: Update, context: CallbackContext):
    try:
        user_height = float(update.message.text.strip())
        if 100 <= user_height <= 250:
            context.user_data['height'] = user_height
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardMarkup(activity_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return ACTIVITY
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º)."
            )
            return HEIGHT
    except ValueError:
        await update.message.reply_text(
            "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return HEIGHT


async def activity(update: Update, context: CallbackContext):
    activity_level = float(update.message.text.split()[0])
    context.user_data['activity'] = activity_level
    user_data = context.user_data
    calories = calculate_calories(
        user_data['gender'], user_data['age'], user_data['weight'], 
        user_data['height'], user_data['activity']
    )
    user_data['base_calories'] = calories

    await update.message.reply_text(
        f"–í–∞—à –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(diet_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return DIET


async def diet_choice(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    if user_input == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        return await restart_data_input(update, context)
    target_calories = None
    if user_input == "–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è":
        target_calories = int(context.user_data['base_calories'] * 0.85)
    elif user_input == "–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞":
        target_calories = int(context.user_data['base_calories'])
    elif user_input == "–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã":
        target_calories = int(context.user_data['base_calories'] * 1.15)
    if target_calories:
        context.user_data['target_calories'] = target_calories
        await update.message.reply_text(
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {target_calories} –∫–∫–∞–ª.\n–°–æ—Å—Ç–∞–≤–ª—è—é –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å..."
        )
        await get_recipes(update, context)
        return DIET


    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(diet_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return DIET




def get_recipe_details(recipe_url):
    try:
        response = requests.get(recipe_url)
        soup = BeautifulSoup(response.text, 'html.parser')
        main_image = soup.find('img', class_='main-img')
        main_image_url = main_image['src'] if main_image else None
        steps = []
        instructions = soup.select('section.instruction li')
        for step in instructions:
            step_text = step.find('div', class_='desc')
            step_text = step_text.get_text(strip=True) if step_text else None
            step_image = step.find('img', class_='instruction-img')
            step_image_url = step_image['src'] if step_image else None
            if step_text:
                steps.append({'text': step_text, 'image': step_image_url})
        return {
            'main_image': main_image_url,
            'steps': steps
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        return None


def parse_recipes(url, meal_type):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    recipes = []
    for item in soup.select('.post-card-in-lst.row.no-gutters'):
        try:
            name = item.select_one('meta[itemprop="name"]')['content']
            recipe_url = item.select_one('meta[itemprop="url"]')['content']
            calories_text = item.select_one('.nutrition .calories')
            calories = int(calories_text.get_text(strip=True)) if calories_text else None
            recipe_details = get_recipe_details(recipe_url)
            main_image = recipe_details['main_image'] if recipe_details else None
            steps = recipe_details['steps'] if recipe_details else []

            recipes.append({
                'name': name,
                'calories': calories,
                'link': recipe_url,
                'main_image': main_image,
                'steps': steps,
                'meal_type': meal_type
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")

    return recipes


async def cancel(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞.")
    return ConversationHandler.END


async def get_recipes(update: Update, context: CallbackContext):
    try:
        user_data = context.user_data
        target_calories = user_data.get('target_calories')

        if not target_calories:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start."
            )
            return DIET

        meal_ratios = {
            "breakfast": 0.25,
            "lunch": 0.35,
            "snack": 0.15,
            "dinner": 0.25
        }

        meal_type_translation = {
            "breakfast": "–ó–∞–≤—Ç—Ä–∞–∫",
            "lunch": "–û–±–µ–¥",
            "snack": "–ü–µ—Ä–µ–∫—É—Å",
            "dinner": "–£–∂–∏–Ω"
        }

        connection = psycopg2.connect(host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASSWORD)
        cursor = connection.cursor()
        cursor.execute("SELECT name, calories_per_100g, meal_type, link FROM recipes;")
        rows = cursor.fetchall()
        connection.close()

        def portion_calories(calories_per_100g, portion_weight):
            return (calories_per_100g * portion_weight) / 100

        selected_menu = {}
        used_recipes = context.user_data.get('used_recipes', set())
        total_calories = 0
        for meal_type, ratio in meal_ratios.items():
            expected_calories = target_calories * ratio
            meal_options = [row for row in rows if row[2] == meal_type and row[0] not in used_recipes]
            if not meal_options:
                continue
            best_match = min(meal_options, key=lambda x: abs(portion_calories(x[1], 200) - expected_calories))
            best_weight = 200
            actual_calories = portion_calories(best_match[1], best_weight)
            used_recipes.add(best_match[0])
            selected_menu[meal_type] = {
                "name": best_match[0],
                "calories": actual_calories,
                "weight": best_weight,
                "link": best_match[3],
                "calories_per_100g": best_match[1]
            }
            total_calories += actual_calories
        error_margin = abs(total_calories - target_calories)

        if error_margin > target_calories * 0.05:
            last_meal_key = list(selected_menu.keys())[-1]
            last_meal = selected_menu[last_meal_key]
            required_calories = target_calories - (total_calories - last_meal['calories'])
            corrected_weight = required_calories * 100 / last_meal['calories_per_100g']
            corrected_weight = max(50, min(corrected_weight, 500))
            corrected_calories = portion_calories(last_meal['calories_per_100g'], corrected_weight)
            selected_menu[last_meal_key]['weight'] = corrected_weight
            selected_menu[last_meal_key]['calories'] = corrected_calories
            total_calories = target_calories
        context.user_data['selected_menu'] = selected_menu
        context.user_data['used_recipes'] = used_recipes
        message = "–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n\n"
        for meal_type, meal in selected_menu.items():
            message += (
                f"üçΩÔ∏è {meal_type_translation[meal_type]}: {meal['name']} "
                f"({meal['calories']:.0f} –∫–∫–∞–ª, {meal['weight']:.0f} –≥)\n"
            )

        message += f"\n–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {total_calories:.0f} –∫–∫–∞–ª (–¶–µ–ª—å: {target_calories} –∫–∫–∞–ª)."

        await update.message.reply_text(message)
        buttons = [[f"–†–µ—Ü–µ–ø—Ç {i+1}-–≥–æ –±–ª—é–¥–∞"] for i in range(len(selected_menu))]
        buttons.append(["–í—ã–±—Ä–∞—Ç—å –¥–∏–µ—Ç—É/–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
        return DIET

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return DIET


async def show_recipe_steps(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    selected_menu = list(context.user_data.get('selected_menu', {}).values())
    if user_input == "–í—ã–±—Ä–∞—Ç—å –¥–∏–µ—Ç—É/–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        return await change_diet(update, context)
    if "–†–µ—Ü–µ–ø—Ç" in user_input:
        try:
            recipe_number = int(user_input.split('-')[0].split()[1]) - 1
            if recipe_number < 0 or recipe_number >= len(selected_menu):
                raise IndexError
            selected_meal = selected_menu[recipe_number]
            recipe_link = selected_meal['link']
            await update.message.reply_text(f"üìñ –†–µ—Ü–µ–ø—Ç: {selected_meal['name']}\n{recipe_link}")
            buttons = [[f"–†–µ—Ü–µ–ø—Ç {i+1}-–≥–æ –±–ª—é–¥–∞"] for i in range(len(selected_menu))]
            buttons.append(["–í—ã–±—Ä–∞—Ç—å –¥–∏–µ—Ç—É/–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return DIET
        except (ValueError, IndexError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
            return DIET

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∏–µ—Ç—ã.")
    return DIET


app = Application.builder().token(BOT_TOKEN).build()


conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
        ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
        DIET: [
            MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –¥–∏–µ—Ç—É/–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$"), change_diet),
            MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$"), restart_data_input),
            MessageHandler(filters.Regex("^(–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è|–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞|–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã)$"), diet_choice),
            MessageHandler(filters.Regex("^–†–µ—Ü–µ–ø—Ç \\d+-–≥–æ –±–ª—é–¥–∞$"), show_recipe_steps),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        CommandHandler("start", restart_data_input)
    ],
)

app.add_handler(CommandHandler("start_message", start_message))
app.add_handler(conv_handler)
app.add_handler(CommandHandler("help", help_command))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()